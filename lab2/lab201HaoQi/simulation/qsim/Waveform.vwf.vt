// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/24/2025 16:44:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          chengfaqi
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module chengfaqi_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] multi_input;
reg sys_clk;
// wires                                               
wire [7:0] led;
wire [7:0] result;
wire [7:0] sg;

// assign statements (if any)                          
chengfaqi i1 (
// port map - connection between master ports and signals/registers   
	.led(led),
	.multi_input(multi_input),
	.result(result),
	.sg(sg),
	.sys_clk(sys_clk)
);
initial 
begin 
#1000000 $finish;
end 

// sys_clk
always
begin
	sys_clk = 1'b0;
	sys_clk = #5000 1'b1;
	#5000;
end 

// multi_input[7]
initial
begin
	multi_input[7] = 1'b0;
	multi_input[7] = #400000 1'b1;
	multi_input[7] = #400000 1'b0;
end 

// multi_input[6]
initial
begin
	repeat(2)
	begin
		multi_input[6] = 1'b0;
		multi_input[6] = #200000 1'b1;
		# 200000;
	end
	multi_input[6] = 1'b0;
end 

// multi_input[5]
always
begin
	multi_input[5] = 1'b0;
	multi_input[5] = #100000 1'b1;
	#100000;
end 

// multi_input[4]
always
begin
	multi_input[4] = 1'b0;
	multi_input[4] = #50000 1'b1;
	#50000;
end 

// multi_input[3]
initial
begin
	repeat(3)
	begin
		multi_input[3] = 1'b0;
		multi_input[3] = #160000 1'b1;
		# 160000;
	end
	multi_input[3] = 1'b0;
end 

// multi_input[2]
initial
begin
	repeat(6)
	begin
		multi_input[2] = 1'b0;
		multi_input[2] = #80000 1'b1;
		# 80000;
	end
	multi_input[2] = 1'b0;
end 

// multi_input[1]
initial
begin
	repeat(12)
	begin
		multi_input[1] = 1'b0;
		multi_input[1] = #40000 1'b1;
		# 40000;
	end
	multi_input[1] = 1'b0;
end 

// multi_input[0]
always
begin
	multi_input[0] = 1'b0;
	multi_input[0] = #20000 1'b1;
	#20000;
end 
endmodule

